version: 0.2

env:
  variables:
    ECR_REPO: "customer-info/app"
  git-credential-helper: yes

phases:
  pre_build:
    commands:
      - echo "[pre_build] ECR login"
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - REGION="${AWS_DEFAULT_REGION:-ap-northeast-1}"
      - aws ecr get-login-password --region "$REGION" | docker login --username AWS --password-stdin "${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"

      - echo "[pre_build] resolve tags"
      - COMMIT_SHA=$(echo "${CODEBUILD_RESOLVED_SOURCE_VERSION:-manual}" | cut -c1-7)
      - BRANCH_NAME=${CODEBUILD_WEBHOOK_BASE_REF##*/}; BRANCH_NAME=${BRANCH_NAME:-${CODEBUILD_SOURCE_VERSION}}; BRANCH_NAME=${BRANCH_NAME##*/}
      - SAFE_BRANCH=$(echo "${BRANCH_NAME:-manual}" | tr '/_' '-' | tr -cd '[:alnum:]-')
      - TS=$(date +%Y%m%d%H%M%S)
      - IMAGE_TAG="${SAFE_BRANCH}-${COMMIT_SHA}-${TS}"
      - IMAGE_URI="${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}"
      - echo "IMAGE_URI=${IMAGE_URI}"

  build:
    commands:
      - set -e
      - echo "[build] docker build"
      - CTX="${BUILD_CONTEXT:-.}"
      - DOCKERFILE_PATH="${DOCKERFILE_PATH:-${CTX}/Dockerfile}"
      - unset DOCKER_CONTEXT DOCKER_HOST DOCKER_TLS_VERIFY DOCKER_CERT_PATH || true

      - echo "[build] Dockerfile header:"; head -n 5 "${DOCKERFILE_PATH}" || true
      - grep -nE '^FROM ' "${DOCKERFILE_PATH}"

      - docker build --pull -f "${DOCKERFILE_PATH}" -t "${ECR_REPO}:${IMAGE_TAG}" "${CTX}"
      - docker tag "${ECR_REPO}:${IMAGE_TAG}" "${IMAGE_URI}"

  post_build:
    commands:
      - set -eu
      - echo "[post_build] push image"
      - docker push "${IMAGE_URI}"

      - echo "[post_build] validate EXEC_ROLE_ARN"
      - test -n "${EXEC_ROLE_ARN:-}" || { echo "EXEC_ROLE_ARN is empty; set it in CodeBuild env"; exit 1; }
      - REGION_OUT="${REGION:-${AWS_DEFAULT_REGION:-ap-northeast-1}}"

      - echo "[post_build] write appspec.yaml & taskdef.json"
      - |
        cat > appspec.yaml << 'APPSPEC'
        version: 0.0
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: <TASK_DEFINITION>
                LoadBalancerInfo:
                  ContainerName: "app"
                  ContainerPort: 80
        APPSPEC
      - |
        cat > taskdef.json <<EOF
        {
          "family": "customer-info-task",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "${EXEC_ROLE_ARN}",
          "taskRoleArn": "${TASK_ROLE_ARN}",
          "containerDefinitions": [
            {
              "name": "app",
              "image": "${IMAGE_URI}",
              "essential": true,
              "portMappings": [{ "containerPort": 80, "protocol": "tcp" }],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/customer-info",
                  "awslogs-region": "${REGION_OUT}",
                  "awslogs-stream-prefix": "customer-info"
                }
              },
              "environment": [
                { "name": "DB_HOST", "value": "REPLACE_DB_HOST" },
                { "name": "DB_USER", "value": "REPLACE_DB_USER" },
                { "name": "DB_PASSWORD", "value": "REPLACE_DB_PASSWORD" },
                { "name": "DB_NAME", "value": "REPLACE_DB_NAME" }
              ],
              "healthCheck": {
                "command": ["CMD-SHELL", "awk 'NR>1 && $2 ~ /:0050$/ && $4==\"0A\"{f=1} END{exit f?0:1}' /proc/net/tcp"],
                "interval": 30,
                "timeout": 5,
                "retries": 3,
                "startPeriod": 10
              }
            }
          ],
          "runtimePlatform": {
            "operatingSystemFamily": "LINUX",
            "cpuArchitecture": "X86_64"
          }
        }
        EOF

      - ls -l appspec.yaml taskdef.json
      - head -n 40 taskdef.json

artifacts:
  files:
    - appspec.yaml
    - taskdef.json
  discard-paths: yes
